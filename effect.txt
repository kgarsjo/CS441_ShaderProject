//++++++++++++++++++++++++++++++++++++++++++++
// ENBSeries effect file
// visit http://enbdev.com for updates
// Copyright (c) 2007-2012 Boris Vorontsov
//++++++++++++++++++++++++++++++++++++++++++++
//THIS IS HLSL FILE FORMAT FOR EXECUTING ADDITIONAL
//POST PROCESSING EFFECTS. MAKE THE COPY BEFORE CHANGING IT!

//kind of old black-white tv filter

//enable separation by 625 scanlines
//#define ESCANLINE


//+++++++++++++++++++++++++++++
//internal parameters, can be modified
//+++++++++++++++++++++++++++++
static const float PI = 3.14159265f;
float3 GrayFilter=float3(1.0, 0.7, 0.4);
float3 pink= {0.82, 0.01, 0.89};
float3 green= {0.16, 0.99, 0.01};
float3 orange= {0.93, 0.64, 0.01};
float3 teal= {0.01, 0.89, 0.99};
float Brightness=0.8;
float ClampLow=0.03;
float ClampHigh=0.95;

float NoiseMixCurve=0.8;
float NoiseMixMultiplier=1.5;
float AdditiveNoiseFactor=0.2;
float MultiplicativeNoiseMin=0.5;
float MultiplicativeNoiseMax=1.5;

float BlurSamplingRange=1.0;//horizontal blur




//+++++++++++++++++++++++++++++
//external parameters, do not modify
//+++++++++++++++++++++++++++++
//keyboard controlled temporary variables (in some versions exists in the config file). Press and hold key 1,2,3...8 together with PageUp or PageDown to modify. By default all set to 1.0
float4	tempF1; //0,1,2,3
float4	tempF2; //5,6,7,8
float4	tempF3; //9,0
//x=generic timer in range 0..1, period of 16777216 ms (4.6 hours), w=frame time elapsed (in seconds)
float4	Timer;
float period= 4.0 / 10000.0;	// TODO validate later
//x=Width, y=1/Width, z=ScreenScaleY, w=1/ScreenScaleY
float4	ScreenSize;



//textures
texture2D texColor;
texture2D texNoise;

sampler2D SamplerColor = sampler_state
{
	Texture   = <texColor>;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = NONE;//NONE;
	AddressU  = Clamp;
	AddressV  = Clamp;
	SRGBTexture=FALSE;
	MaxMipLevel=0;
	MipMapLodBias=0;
};

sampler2D SamplerNoise = sampler_state
{
	Texture   = <texNoise>;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = NONE;//NONE;
	AddressU  = Wrap;
	AddressV  = Wrap;
	SRGBTexture=FALSE;
	MaxMipLevel=0;
	MipMapLodBias=0;
};


struct VS_OUTPUT_POST
{
	float4 vpos  : POSITION;
	float2 txcoord : TEXCOORD0;
};

struct VS_INPUT_POST
{
	float3 pos  : POSITION;
	float2 txcoord : TEXCOORD0;
};

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Hue to RGB
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
float3 HUEtoRGB(in float H)
{
    float R = abs(H * 6.0 - 3.0) - 1.0;
    float G = 2.0 - abs(H * 6.0 - 2.0);
    float B = 2.0 - abs(H * 6.0 - 4.0);
    return saturate(float3(R,G,B));
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// RGB/C/V to Hue
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
float RGBCVtoHUE(in float3 RGB, in float C, in float V)
{
      float3 Delta = (V - RGB) / C;
      Delta.rgb -= Delta.brg;
      Delta.rgb += float3(2.0,4.0,6.0);
      Delta.brg = step(V, RGB) * Delta.brg;
      float H;
      H = max(Delta.r, max(Delta.g, Delta.b));
      return frac(H / 6.0);
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Hue/Sat/Val to RGB
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
float3 HSVtoRGB(in float3 HSV)
{
    float3 RGB = HUEtoRGB(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
 
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// RGB to Hue/Sat/Val
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
float3 RGBtoHSV(in float3 RGB)
{
    float3 HSV = 0.0;
    HSV.z = max(RGB.r, max(RGB.g, RGB.b));
    float M = min(RGB.r, min(RGB.g, RGB.b));
    float C = HSV.z - M;
    if (C != 0.0)
    {
      HSV.x = RGBCVtoHUE(RGB, C, HSV.z);
      HSV.y = C / HSV.z;
    }
    return HSV;
}

float3 lerpColor(in float3 c1, in float3 c2, in float prd)
{
	float scale;
	scale= (Timer.x % prd) / prd * (2*PI);
	scale= abs( (sin(scale) / 2.0) + 0.5 );
	
	return lerp(c1, c2, scale);
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
VS_OUTPUT_POST VS_PostProcess(VS_INPUT_POST IN)
{
	VS_OUTPUT_POST OUT;

	float4 pos=float4(IN.pos.x,IN.pos.y,IN.pos.z,1.0);

	OUT.vpos=pos;
	OUT.txcoord.xy=IN.txcoord.xy;

	return OUT;
}




//1
float4 PS_ProcessColor(VS_OUTPUT_POST IN, float2 vPos : VPOS) : COLOR
{
	// Control defined for debugging purposes. 
	// Leave defined to test whether script compiles (should produce a blue-washed effect).
	// Comment out to compile the intended effect.
	// #define CONTROL
	
	float4 controlRes;		// (Control value) Return vector for the current pixel
	float4 controlOrig;		// (Control value) Original vector for the current pixel
	
	float4 res;			// Return vector for the current pixel
	float4 orig;		// Original vector for the current pixel
	float4 coord=0.0;	// The coordinates of the current pixel (defaults to 0)
	float fadeScale;	// The scale value for color fade based on the Timer
	float gradScale;	// The scale value for gradient fade percentage
	float gradBase;		// The base value for gradient fade percentage
	float3 grad;		// The color to use during gradients
	float3 topLeft;		// The color of the top-left screen corner
	float3 topRight;	// The color of the top-right screen corner
	float3 bottomLeft;	// The color of the bottom-left screen corner
	float3 bottomRight;	// The color of the bottom-right screen corner
	float3 topx;		// The intermediate value of top-x interpolation
	float3 botx;		// The intermediate value of bottom-x interpolation
	float3 ohsv;		// The HSV representation of the current pixel
	float3 phsv;		// The HSV representation of the Pink color
	float3 endval;		// The result vector for the current pixel
	float xratio;		// The x coord normalized between 0 and 1
	float yratio;		// The y coord normalized between 0 and 1
	float switchPeriod;	// The period for switching color values on corners
	
	coord.xy=IN.txcoord.xy;
	controlOrig= tex2Dlod(SamplerColor, coord);
	orig= tex2Dlod(SamplerColor, coord);
	xratio= vPos.x / ScreenSize.x;
	yratio= vPos.y / (ScreenSize.x / ScreenSize.z);
	
	// Evaluate Scale values based on Timer and the Sine function
	fadeScale= (Timer.x % period) / period * (2*PI);
	fadeScale= abs( (sin(fadeScale) / 2.0) + 0.5 );
	gradScale= 0.99;
	gradBase= 0.15;
	switchPeriod= period * (2.0 / 3.0);
	
	// Lerp the grad colors of all color vectors
	topLeft= lerpColor(pink, orange, switchPeriod);
	topRight= lerpColor(teal, green, switchPeriod);
	bottomLeft= lerpColor(orange, pink, switchPeriod);
	bottomRight= lerpColor(green, teal, switchPeriod);
	topx= lerp(topLeft, topRight, xratio);
	botx= lerp(bottomLeft, bottomRight, xratio);
	grad= lerp(topx, botx, yratio);
	
	// Colorize the current pixel and store in endval
	ohsv= RGBtoHSV(orig.xyz);
	phsv= RGBtoHSV(grad);
	ohsv.x= phsv.x;
	endval= HSVtoRGB(ohsv);
	
	// Interpolate original pixel and endval pixel
	orig.xyz= lerp(orig.xyz, endval, clamp(fadeScale * gradScale, gradBase, 1.0));

	//scale
	orig.xyz *= Brightness;
	
	//limit
	orig.xyz= clamp(orig.xyz, ClampLow, ClampHigh);

	#ifdef CONTROL
		controlOrig.xyz=clamp(controlOrig.xyz, ClampLow, ClampHigh);
		controlOrig.xyz*=Brightness;
		controlOrig.xy *= 0.5;
		
		controlRes.xyz= controlOrig.xyz;
		controlRes.w=1.0;
		return controlRes;
	#endif
	
	res.xyz= orig.xyz;
	res.w= 1.0;
	return res;
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
technique PostProcess
{
	pass P0
	{
		VertexShader = compile vs_3_0 VS_PostProcess();
		PixelShader  = compile ps_3_0 PS_ProcessColor();
		
		DitherEnable=FALSE;
		ZEnable=FALSE;
		CullMode=NONE;
		ALPHATESTENABLE=FALSE;
		SEPARATEALPHABLENDENABLE=FALSE;
		AlphaBlendEnable=FALSE;
		StencilEnable=FALSE;
		FogEnable=FALSE;
		SRGBWRITEENABLE=FALSE;
	}
}


